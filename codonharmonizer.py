#!/usr/bin/env python

"""

Codon harmonizer

A program that attempts to recode a gene by considering the relative usage
of each codon in it's host and selecting a codon with the nearest relative
usage in a target organism.

In typical codon optimizers, each codon of a gene of interest is converted to
the "best" codon for a target organism. Yet, wild-type sequences don't always
use the "best" codon in their host organism. This code adjusts for this by
selecting the codon of a target organism that most closely approximates the 
codon's usage in a source organism.

Try `codonharmonizer.py --help` for usage details.


This code was intended as a fork of Bart Nijsse's `codon harmonizer`
(https://gitlab.com/wurssb/Codonharmonizer)
but ended up a whole-scale rewrite.

Where referenced in academic work, you may cite this repository and may also
consider referencing manuscript discussing from Nijsse's work
(doi.org/10.1371/journal.pone.0184355).


Author: Shyam Saladi (saladi@caltech.edu)
Date: May 2020
License: GPLv3

"""

import sys
import os.path
import argparse
import re
import textwrap
import itertools

import pandas as pd

import Bio.SeqIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord

def read_fasta_file(fasta_file):
    """Yield each dna sequence as pd.DataFrame of codons/aa"""
    re_atcg = re.compile("[ATUCG]")

    for rec in Bio.SeqIO.parse(fasta_file, "fasta"):
        # Check for valid length
        if len(rec.seq) % 3 != 0:
            raise ValueError("Sequences cannot have incomplete codons")
        # Check for invalid DNA characters
        if len(re_atcg.sub('', str(rec.seq))) > 0:
            raise ValueError("Some non-ACTG characters found, check input")
        
        yield rec

def format_fasta(name, seq, width=70):
    seq = textwrap.fill(seq, width)
    return ">{}\n{}".format(name, seq)

def write_reference_freq(fasta_file):
    """Processes fasta file into codon totals"""

    # Accumulate codon counts
    codon_count = {}
    for c in itertools.product('ACGT', repeat=3):
        c = "".join(c)
        codon_count[c] = 0

    for rec in read_fasta_file(fasta_file):
        for i in range(0, len(rec.seq), 3):
            c = str(rec.seq[i:i+3])
            codon_count[c] += 1

    codon_count = pd.Series(codon_count)
    codon_count.index.name = 'codon'
    codon_count.name = 'count'
    df = codon_count.reset_index()

    # Add amino acid to frame
    def translate_codon(x):
        rec = SeqRecord(seq=Seq(x))
        return str(rec.translate().seq)
    df['aa'] = df['codon'].apply(translate_codon)

    df = df[['codon', 'aa', 'count']]
    df.sort_values(['codon'], inplace=True)
    return df

def read_reference_freq(freq_file_path):
    """Relative frequencies and counts of all the codons from the given organism"""
    df_freq = pd.read_csv(freq_file_path)
    assert df_freq.columns.tolist() == ['codon', 'aa', 'count']
    
    df_freq['codon'] = df_freq['codon'].str.upper()
    df_freq['aa'] = df_freq['aa'].str.upper()
    df_freq['count'] = df_freq['count'].astype(int)

    df_freq['freq'] = df_freq.groupby("aa")['count'].transform(lambda x: x/x.max())
    return df_freq


def harmonize_gene(seq, df_source_freq, df_target_freq):
    """Harmonizes a DNA sequence given source and target codon frequencies"""

    # Convert to dataframe
    codons = [str(seq[i:i+3]) for i in range(0, len(seq), 3)]
    protseq = list(str(seq.translate()))
    df_seq = pd.DataFrame({'codon': codons, 'aa': protseq})

    # map source codons to target codons
    df_source_freq = df_source_freq.set_index('codon')
    df_target_freq = df_target_freq.set_index('codon')

    codon_trans = {}
    for codon, r in df_source_freq.iterrows():
        aa, codon_freq = r['aa'], r['freq']

        df_aa = df_target_freq[df_target_freq['aa'] == aa]
        codon_repl = (df_aa['freq'] - codon_freq).abs().idxmin()
        codon_trans[codon] = codon_repl
    
    df_seq['recode'] = df_seq['codon'].apply(lambda x: codon_trans[x])
    seq_harmonized = "".join(df_seq['recode'].tolist())

    return seq_harmonized, df_seq

def calculate_CHI(freqs, native_freq):
    """Calculate index score or CHI, Codon Harmonization Index"""
    nr_codons = len(native_freq)
    diffsum = 0

    for AApos in range(nr_codons):
        diffsum += abs(freqs[AApos][2] - native_freq[AApos][2])

    return diffsum/nr_codons


def main():
    parser = argparse.ArgumentParser(
        description='Harmonize a coding sequence for a target organism')
    parser.add_argument("fasta")

    parser.add_argument("--write_freqs", action='store_true',
        help="Count codons and write to stdout, e.g. of source or target coding sequences")

    arg_group = parser.add_argument_group('organism',
        "Coding sequences (fasta file) or codon counts (csv file generated by `--write_freqs`)")
    arg_group.add_argument("--source", required='--write_freqs' not in sys.argv)
    arg_group.add_argument("--target", required='--write_freqs' not in sys.argv)

    parser.add_argument("--stats", default=None,
        help="Write statistics for harmonized genes as a json-formatted file")

    args = parser.parse_args()

    if args.write_freqs:
        df = write_reference_freq(args.fasta)
        print(df.to_csv(index=False))
        return

    # Read source and target frequencies
    source_name, _ = os.path.splitext(args.source)
    source_freq = read_reference_freq(args.source)
    target_name, _ = os.path.splitext(args.target)
    target_freq = read_reference_freq(args.target)

    # harmonize all sequences provided
    for rec in read_fasta_file(args.fasta):
        header, seq = rec.id, rec.seq
        seq_harm, df_stats = harmonize_gene(seq, source_freq, target_freq)

        # statistics
        # CHI = calculate_CHI(harm_gene_freq, source_gene_freq)
        # non_CHI = calculate_CHI(target_gene_freq, source_gene_freq)
        name = "{} (src:{}-tgt:{})".format(header, source_name, target_name)
        print(format_fasta(name, seq_harm))
        
        if args.stats is not None:
            with open(args.stats, "a") as fh:
                print("# Source Organism:," + source_name, file=fh)
                print("# Target Organism:," + target_name, file=fh)

                print("# Original CAI in source:", CAI_native, file=fh)
                print("# Original CAI in target:", CAI_nonNative, file=fh)
                print("# Harmonized CAI in target:", CAI_harmonized, file=fh)

                print("# Original CHI in source:", CAI_native, file=fh)
                print("# Original CHI in target:", CAI_nonNative, file=fh)
                print("# Harmonized CHI in target:", CAI_harmonized, file=fh)

                print("Codon Harmony Index XX :", CHI, file=fh)
                print("Codon Harmony Index XX :", non_CHI, file=fh)
                
                print(pd.DataFrame(df_stats))
    return

if __name__ == "__main__":
    main()
